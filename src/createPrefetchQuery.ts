import ts from 'typescript';
const factory = ts.factory;
export const createPrefetchQuery = () => {
	return [
		factory.createImportDeclaration(
			undefined,
			factory.createImportClause(
				false,
				undefined,
				factory.createNamedImports([
					factory.createImportSpecifier(
						false,
						undefined,
						factory.createIdentifier('dehydrate')
					),
					factory.createImportSpecifier(
						false,
						undefined,
						factory.createIdentifier('Hydrate')
					),
					factory.createImportSpecifier(
						false,
						undefined,
						factory.createIdentifier('QueryKey')
					),
				])
			),
			factory.createStringLiteral('@tanstack/react-query'),
			undefined
		),
		factory.createImportDeclaration(
			undefined,
			factory.createImportClause(
				false,
				undefined,
				factory.createNamedImports([
					factory.createImportSpecifier(
						false,
						undefined,
						factory.createIdentifier('getQueryClient')
					),
				])
			),
			factory.createStringLiteral('./get-query-client'),
			undefined
		),
		factory.createFunctionDeclaration(
			[
				factory.createToken(ts.SyntaxKind.ExportKeyword),
				factory.createToken(ts.SyntaxKind.AsyncKeyword),
			],
			undefined,
			factory.createIdentifier('prefetchQuery'),
			[
				factory.createTypeParameterDeclaration(
					undefined,
					factory.createIdentifier('T'),
					factory.createFunctionTypeNode(
						undefined,
						[],
						factory.createTypeReferenceNode(
							factory.createIdentifier('Promise'),
							[factory.createKeywordTypeNode(ts.SyntaxKind.AnyKeyword)]
						)
					),
					factory.createFunctionTypeNode(
						undefined,
						[],
						factory.createTypeReferenceNode(
							factory.createIdentifier('Promise'),
							[factory.createKeywordTypeNode(ts.SyntaxKind.AnyKeyword)]
						)
					)
				),
			],
			[
				factory.createParameterDeclaration(
					undefined,
					undefined,
					factory.createIdentifier('key'),
					undefined,
					factory.createTypeReferenceNode(
						factory.createIdentifier('QueryKey'),
						undefined
					),
					undefined
				),
				factory.createParameterDeclaration(
					undefined,
					undefined,
					factory.createIdentifier('fetcher'),
					undefined,
					factory.createTypeReferenceNode(
						factory.createIdentifier('T'),
						undefined
					),
					undefined
				),
			],
			undefined,
			factory.createBlock(
				[
					factory.createVariableStatement(
						undefined,
						factory.createVariableDeclarationList(
							[
								factory.createVariableDeclaration(
									factory.createIdentifier('queryClient'),
									undefined,
									undefined,
									factory.createCallExpression(
										factory.createIdentifier('getQueryClient'),
										undefined,
										[]
									)
								),
							],
							ts.NodeFlags.Const |
								ts.NodeFlags.AwaitContext |
								ts.NodeFlags.ContextFlags |
								ts.NodeFlags.TypeExcludesFlags
						)
					),
					factory.createExpressionStatement(
						factory.createAwaitExpression(
							factory.createCallExpression(
								factory.createPropertyAccessExpression(
									factory.createIdentifier('queryClient'),
									factory.createIdentifier('prefetchQuery')
								),
								undefined,
								[
									factory.createIdentifier('key'),
									factory.createIdentifier('fetcher'),
								]
							)
						)
					),
					factory.createVariableStatement(
						undefined,
						factory.createVariableDeclarationList(
							[
								factory.createVariableDeclaration(
									factory.createIdentifier('dehydratedState'),
									undefined,
									undefined,
									factory.createCallExpression(
										factory.createIdentifier('dehydrate'),
										undefined,
										[factory.createIdentifier('queryClient')]
									)
								),
							],
							ts.NodeFlags.Const |
								ts.NodeFlags.AwaitContext |
								ts.NodeFlags.ContextFlags |
								ts.NodeFlags.TypeExcludesFlags
						)
					),
					factory.createReturnStatement(
						factory.createObjectLiteralExpression(
							[
								factory.createPropertyAssignment(
									factory.createIdentifier('HydrateState'),
									factory.createArrowFunction(
										undefined,
										undefined,
										[
											factory.createParameterDeclaration(
												undefined,
												undefined,
												factory.createIdentifier('props'),
												undefined,
												factory.createTypeLiteralNode([
													factory.createPropertySignature(
														undefined,
														factory.createIdentifier('children'),
														undefined,
														factory.createKeywordTypeNode(
															ts.SyntaxKind.AnyKeyword
														)
													),
												]),
												undefined
											),
										],
										undefined,
										factory.createToken(ts.SyntaxKind.EqualsGreaterThanToken),
										factory.createParenthesizedExpression(
											factory.createJsxFragment(
												factory.createJsxOpeningFragment(),
												[
													factory.createJsxText(
														'\
				',
														true
													),
													factory.createJsxElement(
														factory.createJsxOpeningElement(
															factory.createIdentifier('Hydrate'),
															undefined,
															factory.createJsxAttributes([
																factory.createJsxAttribute(
																	factory.createIdentifier('state'),
																	factory.createJsxExpression(
																		undefined,
																		factory.createIdentifier('dehydratedState')
																	)
																),
															])
														),
														[
															factory.createJsxExpression(
																undefined,
																factory.createPropertyAccessExpression(
																	factory.createIdentifier('props'),
																	factory.createIdentifier('children')
																)
															),
														],
														factory.createJsxClosingElement(
															factory.createIdentifier('Hydrate')
														)
													),
													factory.createJsxText(
														'\
			',
														true
													),
												],
												factory.createJsxJsxClosingFragment()
											)
										)
									)
								),
								factory.createShorthandPropertyAssignment(
									factory.createIdentifier('dehydratedState'),
									undefined
								),
							],
							true
						)
					),
				],
				true
			)
		),
	];
};
